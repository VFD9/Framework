// 2022.06.23 Framework Ver 0.4
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

using namespace std;

// 클래스 내부에서 함수를 선언하면 인라인 함수처럼 사용된다.

// 11. 포인터 (복습) & 캡슐화
// 캡슐화 - 기능(함수)과 데이터를 묶어놓은 상태

// [포인터]
/*
	1. * : 데이터, & : 주소반환 연산자
	2. 포인터변수라면 [동적할당] - 확신이 없다면 동적할당부터 하는편이 좋다.
	3. 클래스와 구조체는 [.](점) 아니면 [->](화살표)로 접근
	4. [동적할당] 했다면 반드시 [할당해제] => 하지 않으면 메모리 누수가 발생한다.
*/

// inline 함수 - 먼저 실행시킬 수 있도록 도와주는 예약어
// const - 상수화 키워드, 값 변경을 하지 말라는 의미이기도 하다.
// & 사용 시기
/*
	※ 2항 연산일 경우
	1. &는 비트연산자의 역할을 하게된다.
	2. &&일 경우는 논리연산자 and의 역할을 하게 된다.

	※ 단항일 경우
	1. 항목 앞쪽에 쓰일 경우 주소 반환 연산자가 된다.
	2. 레퍼런스 연산자 - Call by Reference에서 파생된 의미
	값을 복사하는 것이 아닌 그 자체를 가져와서 사용하는 것이다.
*/

int main(void)
{
	

	return 0;
}